'use strict';
'ver123';
function scrollFromTop() {
let fff = window.pageYOffset || document.documentElement.scrollTop;
return fff;
}
function positionAfterSend(heightblock) {
let winPostionScroll = window.pageYOffset || document.documentElement.scrollTop;
let heightpage = window.innerHeight;
let heightpopupblock = jQuery(heightblock).height();
let position = heightpage / 2 + heightpopupblock + winPostionScroll;
return position;
}
function mfScrollStatic_Click(event) {
event.preventDefault();
for (let field of event.data.fields) {
if (this[field]) {
document.getElementById(field).value = this[field].replace('_', ' ');
continue;
}
if (this[field] !== undefined) {
document.getElementById(field).value = '';
}
}
jQuery('html, body').animate({
scrollTop: jQuery("#mfForm_" + event.data.id).offset().top - 100
}, 2000);
return false;
}
function mfOpenModal_Click(event) {
event.preventDefault();
for (let field of this.fields) {
if (this[field]) {
document.getElementById(field).value = this[field].replace('_', ' ');
continue;
}
if (this[field] !== undefined) {// если пробел.
document.getElementById(field).value = '';
}
}
document.getElementById('mfForm_' + this.id).showModal();
return false;
let modal_id = 'mfForm_' + id; 
let heightpage = jQuery(window).height();
let heightpopupblock = jQuery('#' + modal_id).height();
jQuery('#mfOverlay_' + id).fadeIn(400, 
function () {	// после выполнения предыдущей анимации
let scrollFT = 0;	 
let positiOnScroll = 0;
if (heightpopupblock + 50 >= heightpage) {
scrollFT = scrollFromTop();
positiOnScroll = 50;
} else {
scrollFT = 0;
positiOnScroll = heightpage / 2 - heightpopupblock / 2 + scrollFT;
}
let modal = jQuery('#' +modal_id);
positiOnScroll = '0';	 
modal.css('display', 'block').animate({opacity: 1, top: positiOnScroll, visibility: 'visible', }, 400, ()=>{
let overlay = jQuery(this).next('.mfOverlay');
jQuery(this)//.modal('show')
.css('padding',0).css('padding-right',0);
}).css('opacity',1).css('top','200');
});
return false;
}
function mfCloseModal_Click(event) {
event.preventDefault();
document.getElementById('mfForm_'+this.id).close();
return;
jQuery("#mfOverlay_" + this.id).fadeOut(()=>{
jQuery("#mfForm_" + this.id)//.fadeOut(400,'swing',{})
.animate({top: '-200%'}, 400)//.delay(800)
.animate({opacity: 0}, 400, function () { 
document.getElementById('mfForm_'+this.id).close();
}).delay(400).modal('hide');
}); 
}
var runingCloseModalForm = false;
function mfClickCloseModal() {
if (runingCloseModalForm)
return;
runingCloseModalForm = true;
jQuery(function () {// Закрытие окна по клику крестика и фона
jQuery('.mfOverlay, .mfClose').click(function (close) {
close.preventDefault();
let id = jQuery(this).attr('data-id');
let modal = "#mfForm_" + id;
let overley = "#mfOverlay_" + id;
console.log(overley,'HaHa');
jQuery(modal).animate({top: 0}, 200);
jQuery(modal)
.animate({opacity: 0}, 300, function () { 
jQuery(this).css('display', 'none'); 
jQuery(overley).fadeOut(400, function(){
document.getElementById('mfForm_'+params.id).close();
}); 
}
);
});
});
}
function hideBlockFormAfterSend(id, modal, overley, status, response) {
let heightpage = jQuery(window).height();
let heightpopupblock = jQuery('.mfPanelDone.id' + id).height();
let scrollFT = scrollFromTop();
let positiOnScroll = heightpage / 2 - heightpopupblock / 2;
positiOnScroll = 0;
jQuery('#mfForm_' + id).animate({top: positiOnScroll}, 400, function () {
jQuery('.mfPanelForm.id' + id).fadeOut(400,function(){
});
setTimeout(function () {
jQuery('#mfForm_' + id)
.animate({top: -positiOnScroll}, 400,
function () { 
jQuery(this).fadeOut(400,function(){
document.getElementById('mfForm_'+id).close();
}); 
jQuery("#mfOverlay_" + id).fadeOut(); 
}
);
}, 10000);
});
}
function hideAndClearFormAfterSend(id, modal, overley, status, response) {
let heightpage = jQuery(window).height();
let heightpopupblock = jQuery('.mfPanelDone.id' + id).height();
let scrollFT = scrollFromTop();
let positiOnScroll = heightpage / 2 - heightpopupblock / 2 + scrollFT;
positiOnScroll = 0;
jQuery('#mfForm_' + id).animate({top: positiOnScroll}, 400, function () {
setTimeout(function () {
jQuery('#mfForm_' + id)
.animate({top: -positiOnScroll}, 400,
function () { 
jQuery(this).fadeOut(400,function(){
document.getElementById('mfForm_'+id).close();
}); 
jQuery('#mfOverlay_' + id).fadeOut(400, function () { 
jQuery('.mfPanelDone.id' + id).fadeOut();
jQuery('.mfPanelForm.id' + id).fadeIn();
jQuery('.mfPanelForm.id' + id).get(0).reset();
jQuery('#mfForm_' + id + ' input[id^=submit]').button('ready');
});
}
);
}, 10000);
});
}
function hideBlockStaticFormAfterSend(id, block, status, response) {
jQuery(".mfPanelForm.id" + id).fadeOut(400, function () {
jQuery('.mfPanelDone.id' + id).fadeIn(400);
}); 
}
function hideAndClearStaticFormAfterSend(id, block, status, response, textbutton) {
jQuery('.mfPanelForm.id' + id).fadeOut(400, function () {
jQuery('.mfPanelDone.id' + id).fadeIn(400, function () {
setTimeout(function () {
jQuery('.mfPanelDone.id' + id).fadeOut(400, function () {
jQuery('.mfPanelForm.id' + id).fadeIn(400, function () {
jQuery('.mfPanelForm.id' + id)[0].reset();
jQuery('#mfForm_' + id + ' input[id^=submit]').button('ready');
});
});
}, 8000);
});
});
}
function mfAjaxDoneForm(html, status) {
if(html == ''){
console.log('!!! Ajax aswer: [EMPTY] moduleID:'+this.id+' status:'+status, this);
return ;
}
const ajaxReload = Math.floor(Math.random() + 10000000);
document.getElementById('mod_'+this.id).dataset.ajaxReload = ajaxReload;
console.log('ajaxReload:',ajaxReload);
const bc = new BroadcastChannel('modMultiModReload' + this.id + '_' + ajaxReload);
bc.addEventListener("message", function (e) {
let url = e.data;
console.log('RELOAD-chanel!!',e.data); 
const reload = e.data == document.getElementById('mod_'+this.id).dataset.ajaxReload;
if(! url  )
url = document.baseURI + 'index.php?option=com_ajax&module=multi_form&format=raw&id='+this.id+'&'+Joomla.getOptions('csrf.token')+'=1';
jQuery.ajax({type: 'GET', url: url, dataType: 'html', data: null, context: this, cache: false, contentType: false, processData: false})
.done(mfAjaxDoneSuccess).fail(mfAjaxFailForm);
});
if(this.type === 'popup')
document.body.insertAdjacentHTML('beforeend',html);
else
document.getElementById('mod_'+this.id).insertAdjacentHTML('beforeend',html);
this.dialog	= document.getElementById('mfForm_'+this.id);
this.form	= document.getElementById('mfForm_form_'+this.id);
this.form.querySelector('output').addEventListener('click', function(){
if(! window.event.shiftKey)	{
this.innerHTML = '';
}
});
validateForm(this);
console.log('BUTTONS:',this.buttons);
if (this.type === 'popup'){
this.dialog.close();
this.dialog.querySelector('.mfClose').addEventListener('click', mfCloseModal_Click.bind(this));
document.addEventListener('keydown', event => {
if(event.code === 'Escape'){
event.preventDefault();
mfCloseModal_Click({data: this, preventDefault: ()=>{}});
}
});
}
if (this.buttons.length > 0) {
for (let btn of this.buttons) {
console.log(btn);
btn.addEventListener('click', (this.type === 'popup' ? mfOpenModal_Click.bind(this) : mfScrollStatic_Click.bind(this)));
}
}	
document.getElementById('submit_'+this.id).addEventListener('click', mfButtonSubmit_Click.bind(this));
document.getElementById('mod_' + this.id).dispatchEvent(new CustomEvent('modMultiForm_Loaded',{detail: this}));
document.getElementById('mod_' + this.id).dataset.loaded = true;
this.deb && console.log('🏆 ButtonSubmit.Click(f()) id:' + this.id + ' Tag:' + this.tag + ' Type:' + this.type + ' - Load form Success! - Done! status:', status, ' ', this);
this.deb && console.log('🏆 Module id:' + this.id + ' Tag:' + this.tag + ' Type:' + this.type + ' - Load form Success! - Done! status:', status);
}
function mfAjaxFailForm(jqXHR, status, errorThrown) {//(jqXHR, status, errorThrown)
const div = document.createElement('div');
div.innerHTML = jqXHR.responseText;
console.log('🚨🚨🚨🚨🚨 Error:',  div.innerText.replaceAll(/(\r\n)/gm, ``).replaceAll(/(\n\n)/gm, ``));
this.deb && console.log('👎 Module id:' + this.id + ' Tag:(' + this.tag + '), Type:' + this.type + ' - Load form Fail! - Disabled button! status:', status, '\n this:', this, ' jqXHR:', jqXHR,'\n errorThrown:',errorThrown);
document.querySelector('#' + this.button).closest('div,label,span,p').insertAdjacentHTML( 'beforeend', '<code>Error Load Form !</code>' );
jQuery('#' + this.button).hide();
}
function mfButtonSubmit_Click(e) {
e.preventDefault();
let func_custom = window['funcBefore' + this.id];
if (func_custom && typeof func_custom === 'function') {
func_custom.apply(this);
}
console.log('🏆 mfButtonSubmit_Click ', "#mfForm_form_"+this.id, this, jQuery("#mfForm_form_" + this.id)); 
validateForm(this);
}
function validateForm(params){
const form = document.getElementById('mfForm_form_' + params.id);
if(! form)
return;
if(params.validate && params.validate.form()){
callSubmit.call(params, form);
return;
}
params.validate = jQuery(form).validate({
invalidHandler: function (event, validator) {
console.log('👎 --------- --------- Validate Faile ---------', validator);
},
submitHandler: callSubmit.bind(params),// console.log.bind(params) ,// 
debug: false
});
}
function callSubmit(form) {//,event 
const params = this;
params.deb &&		 console.log('--------- --------- ---------');
params.deb &&		 console.log('(I)  :-)  - submitHandlerValidate!!!!!->  ()  Captcha:',params.captcha?'Yes🌟':'No🚫', params.captcha, params);
if (params.captcha == 'recaptcha'  && params.grecaptcha !== false) {
params.response = grecaptcha.getResponse(params.WidgetId);
if(params.response){
console.log('(II) Execute() -submitHandler-CallBack!!!!!-> Token', ' This:',this,' Module:',params  );
submitHandlerSubmit.call(params, form);
if(params.xCallback && params.xCallback.trim()){
try {
let callback = params.xCallback.trim();
eval(callback+'()');
}catch(e){
}
}
}
return false;
}
if (params.captcha == 'recaptcha_invisible'  && params.grecaptcha !== false) {
let rdy = this;
grecaptcha.execute(params.grecaptcha).then(function(token){
params.token = token; 
console.log('(II) Execute() -callSubmit-CallBack!!!!!-> Token', token,' This:',this,' Module:',params  );
return;
});
return;
}
else if(params.captcha == 'recaptcha_invisible' && params.grecaptcha === false){//
params.deb && console.log('(II) Valid() -callSubmit-CallBack!!!!!-> ',' This:',this,' Module:',params  );
return;
}else if(!params.captcha || params.grecaptcha === false){//Капча не настроена, выполняем без капчи
params.deb && console.log('(II) Valid() -callSubmit-CallBack!!!!!-> ',' This:',this,' Module:',params );
submitHandlerSubmit.call(params, form);
return;
}else{
params.deb && console.log('👎 Captcha NULL !!!	<--------- captcha:' , params.captcha, '  grecaptcha:', params.grecaptcha );
}
}
function submitHandlerSubmit(form = null){
this.deb && console.log('(III)  submitHandlerSubmit() -Execute-CallBack!!!!!-> ', this);
jQuery('#submit_' + this.id).button('sending')
.css('text-transform', 'none').css('transform', 'none').addClass('active'); 
let itemid = 0;
for (let clss of document.body.classList) {
if (clss.toString().substr(0, 7) === 'itemid-') {
itemid = clss.toString().substr(7);
}
}
if(! form)
form = document.createElement('form');
var data = new FormData(form);
const ajaxReload = document.getElementById('mod_'+this.id).dataset.ajaxReload;
data.append('ajaxReload', ajaxReload);
data.append('option', 'com_ajax');
data.append('module', 'multi_form');
data.append('format', 'raw');
data.append('id', this.id);
data.append('url', document.location.href);
data.append('title', document.title);
data.append('Itemid', itemid);
data.append(Joomla.getOptions('csrf.token'), 1);
if(this.token)
data.set('gToken', this.token);
if(this.response)
data.set('gToken', this.response);
if(this.sitekey !== undefined)
data.append('sitekey', this.sitekey);
if(this.grecaptcha !== undefined)
data.append('grecaptcha', this.grecaptcha);
if(this.response){//this.captcha &&  
data.append('g-recaptcha-response', this.response);
}
this.deb &&		 console.log('--------- --------- ---------');
for (let field of this.fields) {
if (field.substring(0, 4) === 'file') {
for (let file of  document.getElementById(field).files) {//jQuery('#'+field)[0].files
data.append(field, file); 
}
} else {
}
}
let vals = data.values();
let etrs = data.entries();
console.log('data:',vals,' etrs:',Object.fromEntries(etrs)); 
let url = window.location.origin + '/index.php';
url = document.baseURI + 'index.php';
this.deb && console.log('Url Submit:', url);
this.deb && console.log('Ajax request ModuleID:', this.id, ' ', data);
this.deb && console.log(data);
jQuery.ajax({type: 'POST', url: url, dataType: 'html', data: data, context: this, cache: false, contentType: false, processData: false})
.done(mfAjaxDoneSuccess).fail(mfAjaxFailForm);
}
function mfAjaxDoneSuccess(html, status) {
this.deb && console.log("Send Success! html:",[html]);  
this.deb && console.log("Send Success! status:", status);
let func_custom = window['funcAfter' + this.id];
if (func_custom && typeof func_custom === 'function') {
func_custom.apply(this);
}
const dialog = document.getElementById('mfForm_' + this.id);
const panelForm		= dialog.querySelector('.mfPanelForm');
const panelFrame	= dialog.querySelector('.mfPanelFrame');
const panelStatus	= dialog.querySelector('.mfPanelDone');
const panelError	= dialog.querySelector('.mfPanelError');
const output		= dialog.querySelector('output');
let params = this;
let animatePanel = null;
if(location.hash.startsWith('#mod',0)){
location.hash = '' 
}
console.log(html);
if(panelForm && html.indexOf('<form') > -1){
const div = document.createElement('div');
div.innerHTML = html;
panelForm.innerHTML = div.querySelector('form').innerHTML;
animatePanel = panelForm;
return;
}
if(panelForm && html.indexOf('http') == 0){
jQuery.ajax({type: 'POST', url: html, dataType: 'html', context: params, cache: false, contentType: false, processData: false})
.done(mfAjaxDoneSuccess).fail(mfAjaxFailForm);
animatePanel = panelForm;
return;
}
if(window.event.altKey){
console.clear();
console.log(html);
}else{
if(panelFrame && html.indexOf('<output') == -1){
panelFrame.innerHTML = html;
panelFrame.style.display = 'block';
animatePanel = panelFrame;
}
else if(output){
const div = document.createElement('div');
div.innerHTML = html;
output.innerHTML = div.querySelector('output').innerHTML;
animatePanel = panelForm;
}
}
const iframe = dialog.querySelector(':scope  .mfPanelFrame > iframe, :scope  output > iframe');
if(iframe){
jQuery(dialog.querySelector('form')).fadeOut("500");
console.log(this,'iframe->load:',iframe,' iframe.contentDocument:',iframe.contentDocument);
iframe.addEventListener("load", function(){
console.log('iframe->LOADED !!! :',iframe,' iframe.contentDocument:', iframe.contentDocument);
const contentDocument = iframe.contentDocument;
if(contentDocument && (document.location.hostname == contentDocument.location.hostname
|| contentDocument.URL == '') && contentDocument.readyState == "complete"){
console.log('iframe->LOADED->textContent ::: :', iframe.contentDocument.textContent);
animatePanel = iframe.closest('.form, .mfPanelFrame');
jQuery(animatePanel).fadeIn("500");
let reload = iframe.dataset.reload ?? '';
let order = iframe.dataset.order ?? 0;
console.log("Iframe LOADED !!",order,reload);
if(reload)
jQuery.ajax({type: 'POST', url: reload, dataType: 'html', context: params, cache: false, contentType: false, processData: false})
.done(mfAjaxDoneSuccess).fail(mfAjaxFailForm);
return;
let href = contentDocument.location.href;
console.log("Iframe LOADED !",href);
if(href == '' || href == '[{RELOAD}]' || contentDocument.body.innerText.indexOf('[{RELOAD}]') > -1){
href = document.baseURI + '?option=com_ajax&module=multi_form&format=raw&id='+params.id;
}else{
const url = new URL(contentDocument.location.href);
url.searchParams.delete('ajax');
href = url.href; 
}
console.log("Iframe LOADED !!",order,href);
if(reload)
jQuery.ajax({type: 'POST', url: href, dataType: 'html', context: params, cache: false, contentType: false, processData: false})
.done(mfAjaxDoneSuccess).fail(mfAjaxFailForm);
}
});
return;
}
const iform = panelStatus.querySelector(':scope > form');
if(iform){
return true;
if(! iform.id)
iform.id = Date.now();
jQuery('#submit_' + this.id).button('ready')
.css('text-transform', '').css('transform', '').addClass('active').attr('form', 'mfForm_form_'+iform.id); 
return true;
}
let posAfterSend = positionAfterSend('#mfForm_' + this.id);
if (this.type === 'popup') {
jQuery('.mfPanelForm.id' + params.id).fadeOut("1000");
jQuery('.modal-footer.id' + params.id).fadeOut("16000");
jQuery('.mfBeforeText.id' + params.id).fadeOut("16000");
jQuery('.mfPanelDone.id' + params.id).fadeOut("16000");
let animClose = function () {
dialog.close(); 
};
setTimeout(animClose, 19000);
}
if (this.type === 'static') {
jQuery('.mfPanelForm.id' + params.id).fadeOut("500", function () {
jQuery('.mfPanelDone.id' + params.id).fadeOut("500");
jQuery('.static-footer.id' + params.id).fadeOut("500");
jQuery('.mfBeforeText.id' + params.id).fadeOut("500");
jQuery('.mfPanelFrame.id' + params.id).fadeOut("500");
jQuery(animatePanel).fadeIn("500");
if (params.clearaftersend) {
hideAndClearStaticFormAfterSend(
params.id,
'#mfForm_' + params.id,
'.mfPanelDone.id' + params.id,
html,
jQuery('input#submit' + params.id).attr('value')
);
} else {
hideBlockStaticFormAfterSend(
params.id,
'#mfForm_' + params.id,
'.mfPanelDone.id' + params.id,
html
);
}
mfScrollStatic_Click.call(params, {data: params, first: true, preventDefault: function () {
params.deb && console.log('🏆 mfScrollStatic_Click ', "#mfForm_form_" + params.id, params);
return true;
}});
});
}
}
function mfGetUrlHash(url) {
let is_mod = false;
let id = 0;
let hash = {};
Object.assign(hash, jQuery.url('#', url));
let str_hash = jQuery.url('hash', url) || '';
let amp = str_hash.indexOf("&");
amp < 1 && (amp = undefined); 
id = str_hash.startsWith("mfForm_form_") ? str_hash.substring(12, amp) : id;
id = str_hash.startsWith("mfForm_") ? str_hash.substring(7, amp) : id;
id = str_hash.startsWith("mod_") ? str_hash.substring(4, amp) : id;
id = str_hash.startsWith("mod") ? str_hash.substring(3, amp) : id;
hash.id = id || false;
hash.path = jQuery.url('path', url);
hash.hostname = jQuery.url('hostname', url);
hash.query = jQuery.url('query', url);
hash.url = jQuery.url('', url);
return hash;
}
function mfGetModuleById(id) {
return (jQuery('.mfForm.id' + id).data()) || false;
}
function mfGotoModule(module, hash) {
for (let field of module.fields) {
if (hash[field]) {
document.getElementById(field).value = hash[field];
}
}
if (module.type === 'static')
mfScrollStatic_Click.call(module, {data: module, first: true, preventDefault: function () {
module.deb && console.log('🏆 mfScrollStatic_Click ', "#mfForm_form_" + module.id, module);
return true;
}});
if (module.type === 'popup')
mfOpenModal_Click.call(module, {data: module, first: true, preventDefault: function () {
module.deb && console.log('🏆 mfOpenModal_Click ', "#mfForm_form_" + module.id, module);
return true;
}});
}
function mfGetAllActions() {
return (jQuery('a:not(.mfGo)')
.filter(function () {
let href = this.getAttribute("href");
if (!href)
return false;
if (href.indexOf("#") === -1 || href.length < 4)
return false;
return true;
}).map(function () {
let hash = mfGetUrlHash(this.getAttribute("href"));
hash.control = this;
return hash;
}).filter(function () {
return this.id;
}).get());
}
function mfGetAllModules() {
let modules = {};
for(let module of jQuery('.mfForm')){
jQuery(module).data().control = module;
if (module.type)
modules[module.id] = module;
}
return modules;
}
function mfAjaxCompleteAllForm(p1) {
let mods = Array.isArray(this)? this : [this];
console.log('mfAjaxCompleteAllForm()',mods);
for (let module of mods) {
if (! module.captcha) 
continue;
let captcha_type = module.captcha;
Object.assign(module,jQuery('#dynamic_captcha_'+module.id).data());
module.WidgetId = module.grecaptcha = false;
let Captcha_Render = ()=>{
module.WidgetId = module.grecaptcha = grecaptcha.render(
'dynamic_captcha_' + module.id, 
{
'callback': function (response) { 
module.response = response;
let form = document.getElementById("mfForm_form_" + module.id)
console.log('(II) CallBack() !!!!!->', '#dynamic_captcha_' + module.id, module.captcha,  module, ' Form:',form);
if(!response)
return;
if(module.captcha == 'recaptcha'){ 
mfButtonSubmit_Click.call(module, {data: module, first: true, preventDefault: function () {
this.deb && console.log('🏆 mfButtonSubmit_Click ', "#mfForm_form_" + this.id, this);
return true;
}});
return;
}else{
submitHandlerSubmit.call(module, form);
}
console.log('(IV)  Response-CallBack!!!!! --> R:', response, ' M:', module);
if(module.xCallback && module.xCallback.trim()){
try {
let callback = module.xCallback.trim(); 
eval(callback+'()'); 
}catch(e){
}
}
},
'expired-callback': function (response) {//Выполняется при истечении срока действия ответа reCaptcha и требует новой проверки.
if(module.xExpiredCallback && module.xExpiredCallback.trim()){
try {
let callback = module.xExpiredCallback.trim(); 
eval(callback+'()');
}catch(e){
}
}
console.log('(-II)  Delay-CallBack!!!!!-->R:', response, ' M:', module, 'this:', mods);
},
'error-callback': function (response) {//Выполняется при ошибке проверки, обычно это отсутсвие сети, нужно информировать юзера о повторном подключении(проверке).
if(module.xErrorCallback && module.xErrorCallback.trim()){
try {
let callback = module.xErrorCallback.trim(); 
eval(callback+'()');
}catch(e){
}
}
console.log('(-II)  Error-CallBack!!!!!-->R:', response, ' M:', module, 'this:', mods);
}
});
};
let timerId = 0;
setInterval( ()=>{
if(!grecaptcha)
return;
clearInterval(timerId);
if(module.grecaptcha)
return;
Captcha_Render();
}, 1000);
}
console.log('jQuery.validator.messages',jQuery.validator.messages );
let tinyeditor = () => false;
if (typeof tinymce === 'object') {
tinyeditor = function () {
tinymce.init({selector: '.joomla-editor-tinymce', menubar: false,
toolbar: 'undo redo | formatselect | bold italic backcolor strikethrough | removeformat  pastetext | alignleft aligncenter alignright alignjustify   | bullist numlist table outdent indent ',
plugins: ['advlist autolink lists link image charmap print preview anchor', 'searchreplace visualblocks code fullscreen', 'insertdatetime media table paste code   wordcount']});
};
}
let userLang = navigator.language || navigator.userLanguage;
let edit_path = Joomla.iframeButtonClick ? '/media/vendor/tinymce/tinymce.min.js' :
document.location.origin + '/media/editors/tinymce/tinymce.min.js';
let lang_path = Joomla.iframeButtonClick ? '/media/vendor/tinymce/langs/' + userLang + '.js' :
document.location.origin + '/media/editors/tinymce/langs/' + userLang + '.js';
jQuery.getScript(edit_path).always(_ => jQuery.getScript(lang_path).always(tinyeditor));
let hash = mfGetUrlHash(); 
let module = hash.id ? mfGetModuleById(hash.id) : false; 
module && mfGotoModule(module, hash);
let actions = mfGetAllActions();
let modules = mfGetAllModules();
let thisTrue = true;
for (let action of actions) {
if (!(action.id in modules))
continue;
let module = modules[action.id];
action.module = module;
if(action.url.startsWith("#") || 
(hash.hostname === action.hostname || action.hostname === '')
&&
(hash.path === action.path || (['', '/', 'index.php', '/index.php'].includes(hash.path) && ['', '/', 'index.php', '/index.php'].includes(action.path)))
&&
hash.query === action.query
){
if(modules[action.id].type === 'static'){
jQuery(action.control).click(function (e) {
e.preventDefault();
mfScrollStatic_Click.call(action, {data: modules[action.id], first: true, preventDefault: ()=>true});
return false;
});
}
if(modules[action.id].type === 'popup'){
jQuery(action.control).click(function (e) {
e.preventDefault();
mfOpenModal_Click.call(action, {data: modules[action.id], first: true, preventDefault: ()=>true});
return false;
});
}
}
}
console.log('🏆🏆🏆🏆🏆🏆🏆🏆 Module :',mods);
jQuery(":input").inputmask();
}
jQuery(function () {
let mfButtons = {};
let itemid = 0;
for (let clss of document.body.classList) {
if (clss.toString().substr(0, 7) === 'itemid-') {
itemid = clss.toString().substr(7);
}
}
jQuery.when(...jQuery('.mfForm')//.get().reverse()
.filter(function (i, form_mod) {
let params = jQuery(form_mod).data();
if (!params.id) {
return false;
}
params.button = form_mod.id;
params.tag = form_mod.tagName;
if (!(params.id in mfButtons)) {
mfButtons[params.id] = [];
}
if (['a', 'button', 'A', 'BUTTON'].includes(params.tag)) {
mfButtons[params.id].push(form_mod);
}
if ('mod_' + params.id !== params.button)
return false;
params.buttons = mfButtons[params.id];
form_mod.params = params;
return true;
})
.sort((a,b)=>a.dataset.captcha.length - b.dataset.captcha.length)
.map(function (index, form_mod) {//.popup
let url = window.location.origin + '/index.php';
url = document.baseURI + 'index.php';
let request = Object.assign({}, form_mod.dataset);
request.id = form_mod.params.id;
request.format = 'raw';
request.module = 'multi_form';
request.option = 'com_ajax';
request.method = 'getForm';
request.Itemid = itemid;
request.title  = document.title;
request.url	   = document.url;
return jQuery.ajax({type: 'POST', url: url, dataType: 'html', data: request, context: form_mod.params})
.done(mfAjaxDoneForm)
.fail(mfAjaxFailForm);
})
)
.done(mfAjaxCompleteAllForm);
});